git

comandos:

pwd--> me mustra la ruta actual
ls--> lista los archivos de la ruta actual
ls  -al --> muestra los archivos ocultos de la ruta
clear --> limpia la consola o bash
Ctl+l--> limpia en bas con teclado
cd ..--> dar click atras
cd nombre_carpeta --> ingreso al archivo
mkdir nombre archivo --> crear una carpeta
cd nombre_archivo --> para llegar al archivo (con escribir una o 2 letras + TAB)= autocompletar
cd nombre_archivo+ext(ej.txt)--> para crear archivo
cat nombre_archivo --> permite ver lo que hay dentro del archivo
history --> muestra el historial de comandos entrados en la terminal
!nombre (ej.!37)--> permite copiar el codigo de un comando a traves de history
rm nombre_arhivo --> borrar archivo (cuidado!! no usar)
comando --help --> ver opciones del comando
git init --> Crea un staging area y repositorio local
git status --> muestra el status de los archivos en el proyecto
git add nombre_archivo / (git add ./ git add -A)--> guarda el archivo en el staging area
git commit -m "mensaje" --> guarda archivo en repo local
git commit -am "mensaje" --> envia el add y el commit al mismo tiempo
git config --global user.name/email --> para modificar correo y nombre del usuario
git log --> muestra todos los commit hechos
git show nombre_archivo --> para ver los commit de ese archivo en general
git diff sha1(mas viejo) sha2(mas nuevo)--> para comparar cambios entre commits
git reset (sha que quiero eliminar) --hard --> para volver a el commit seleccionado
git branch (nombre rama) --> Asi se crea una nueva rama
git branch --list --> me muestra todas las ramas
git checkout nombre rama --> para cambiar de rama
git merge nombre de cabecera --> Unir el trabajo de varias ramas (Ojo! Antes de hacer merge, hay que pararse en la rama que se quiere que contenga a otra

COMUNICARSE CON GITHUB A TRAVES DE PROTOCOLO HTTPS

git remote add origin (URL) --> Asi se crea un canal de comunicacion con github. la URL se saca despues de crear un repositorio en github
git pull origin (nombre de la rama) --allow-unrelated-histories --> para que el README creado por defecto en el proyecto remoto, no genere conflicto en la conexion
git push origin (nombre rama) --> para enviar todos los archivos al repo remoto

COMUNICARSE CON GITHUB A TRAVES DE PROTOCOLO SSH (mas seguro)

ssh-keygen -t rsa -b 4096 -C "nelson.valle@udea.edu.co" --> asi se crean las llaves publicas y privadas
eval $(ssh-agent -s) --> comando para comprobar que hay conexion para recibir archivos ssh
ssh-add ~/.ssh/id_rsa --> agregar llave privada con mi correo
git remote set-url origin git@github.com:Nelsonvalle/My_firts_Repository.git --> para cambiar el origen y 
que se comunique a traves de ssh

Como crear versiones o tag en git:
git tag -a (nombre de la version) -m "texto commit" (agregar sha [se saca con git log --oneline]) --> sirve para
agregar un tag 
git tag --> para ver qu versiones o tags tengo
git show-ref --tags --> se busca el numero del comiit de un tag (version) especifica
git push origin --tags --> asi se crea y sube al github el tag creado
git tag -d Vo.2 --> para eliminar un tag erroneo en repo local
 git push origin :refs/tags/Vo.2 --> para que el tag borrado se vea reflejado en repo remoto
 

